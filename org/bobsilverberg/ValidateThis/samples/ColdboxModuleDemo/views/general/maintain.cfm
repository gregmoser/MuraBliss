<!---		Copyright 2011, Bob Silverberg & John Whish		Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 	compliance with the License.  You may obtain a copy of the License at 			http://www.apache.org/licenses/LICENSE-2.0		Unless required by applicable law or agreed to in writing, software distributed under the License is 	distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or 	implied.  See the License for the specific language governing permissions and limitations under the 	License.	---><cfoutput>	<script>	jQuery(document).ready(function() {		$(".formContainer").validatethis({debug:true,ajaxProxyURL:"/validatethis/samples/coldboxmoduledemo/coldboxproxy.cfc?method="});	});</script><h1>ValidateThis CF9 ORM ColdBox Module Demo</h1><h3>#rc.PageHeading# (Javascript validations are <cfif rc.nojs>OFF<cfelse>ON</cfif>)</h3>#getPlugin( "MessageBox" ).renderit()#<div class="formContainer">	<form rel="User" action="#event.buildLink( "general.save" )#" id="frmMain" method="post" name="frmMain" class="uniForm">		<fieldset class="inlineLabels">				<legend>Access Information</legend>			<div class="ctrlHolder">				#rc.validationresult.renderErrorByField("UserName")#				<label for="UserName">#rc.Validator.renderFieldIsRequired("UserName", rc.Context)#Email Address</label>				<input name="UserName" id="UserName" value="#rc.user.getUserName()#" size="35" maxlength="50" type="text" class="textInput" />				<p class="formHint">Validations: Required, Must be a valid Email Address.</p>			</div>			<div class="ctrlHolder">				#rc.validationresult.renderErrorByField("Nickname")#				<label for="Nickname">#rc.Validator.renderFieldIsRequired("Nickname", rc.Context)#Nickname</label>				<input name="Nickname" id="Nickname" value="#rc.user.getNickname()#" size="35" maxlength="50" type="text" class="textInput" />				<p class="formHint">Validations: Custom - must be unique. Try 'BobRules'.</p>			</div>			<div class="ctrlHolder">				#rc.validationresult.renderErrorByField("UserPass")#				<label for="UserPass">#rc.Validator.renderFieldIsRequired("UserPass", rc.Context)#Password</label>				<input name="UserPass" id="UserPass" value="" size="35" maxlength="50" type="password" class="textInput" />				<p class="formHint">Validations: Required, Must be between 5 and 10 characters, Must be the same as the Verify password field.</p>			</div>			<div class="ctrlHolder">				#rc.validationresult.renderErrorByField("VerifyPassword")#				<label for="VerifyPassword">#rc.Validator.renderFieldIsRequired("VerifyPassword", rc.Context)#Verify Password</label>				<input name="VerifyPassword" id="VerifyPassword" value="" size="35" maxlength="50" type="password" class="textInput" />				<p class="formHint">Validations: Required.</p>			</div>			<div class="ctrlHolder">				#rc.validationresult.renderErrorByField("UserGroupId")#				<label for="UserGroupId">#rc.Validator.renderFieldIsRequired("UserGroupId", rc.Context)#User Group</label>				<select name="UserGroupId" id="UserGroupId" class="selectInput">					<option value=""<cfif rc.userGroupId EQ ""> selected="selected"</cfif>>Select one...</option>					<option value="1"<cfif rc.userGroupId EQ 1> selected="selected"</cfif>>Member</option>					<option value="2"<cfif rc.userGroupId EQ 2> selected="selected"</cfif>>Administrator</option>				</select>				<p class="formHint">Validations: Required.</p>			</div>		</fieldset>			<fieldset class="inlineLabels">			<legend>User Information</legend>			<div class="ctrlHolder">				#rc.validationresult.renderErrorByField("Salutation")#				<label for="Salutation">#rc.Validator.renderFieldIsRequired("Salutation", rc.Context)#Salutation</label>				<input name="Salutation" id="Salutation" value="#rc.user.getSalutation()#" size="35" maxlength="50" type="text" class="textInput" />				<p class="formHint">Validations: A regex ensures that only Dr, Prof, Mr, Mrs, Ms, or Miss (with or without a period) are allowed.</p>			</div>			<div class="ctrlHolder">				#rc.validationresult.renderErrorByField("FirstName")#				<label for="FirstName">#rc.Validator.renderFieldIsRequired("FirstName", rc.Context)#First Name</label>				<input name="FirstName" id="FirstName" value="#rc.user.getFirstName()#" size="35" maxlength="50" type="text" class="textInput" />				<p class="formHint">Validations: Required on Update.</p>			</div>			<div class="ctrlHolder">				#rc.validationresult.renderErrorByField("LastName")#				<label for="LastName">#rc.Validator.renderFieldIsRequired("LastName", rc.Context)#Last Name</label>				<input name="LastName" id="LastName" value="#rc.user.getLastName()#" size="35" maxlength="50" type="text" class="textInput" />				<p class="formHint">Validations: Required on Update OR if a First Name has been specified during Register.</p>			</div>		</fieldset>		<fieldset class="inlineLabels">			<legend>Misc Details</legend>				<div class="ctrlHolder">				#rc.validationresult.renderErrorByField("LikeCheese")#				<p class="label">#rc.Validator.renderFieldIsRequired("LikeCheese", rc.Context)#Do you like Cheese?</p>				<label for="LikeCheese-1" class="inlineLabel"><input name="LikeCheese" id="LikeCheese-1" value="1" type="radio" class=""<cfif rc.user.getLikeCheese() EQ 1> checked="checked"</cfif> />&nbsp;Yes</label>				<label for="LikeCheese-2" class="inlineLabel"><input name="LikeCheese" id="LikeCheese-2" value="0" type="radio" class=""<cfif rc.user.getLikeCheese() EQ 0> checked="checked"</cfif> />&nbsp;No</label>			</div>			<div class="ctrlHolder">				#rc.validationresult.renderErrorByField("LikeChocolate")#				<p class="label">#rc.Validator.renderFieldIsRequired("LikeChocolate", rc.Context)#Do you like Chocolate?</p>				<label for="LikeChocolate-1" class="inlineLabel"><input name="LikeChocolate" id="LikeChocolate-1" value="1" type="radio" class=""<cfif rc.user.getLikeChocolate() EQ 1> checked="checked"</cfif> />&nbsp;Yes</label>				<label for="LikeChocolate-2" class="inlineLabel"><input name="LikeChocolate" id="LikeChocolate-2" value="0" type="radio" class=""<cfif rc.user.getLikeChocolate() EQ 0> checked="checked"</cfif> />&nbsp;No</label>			</div>			<div class="ctrlHolder">				#rc.validationresult.renderErrorByField("LikeOther")#				<label for="LikeOther">#rc.Validator.renderFieldIsRequired("LikeOther", rc.Context)#What do you like?</label>				<input name="LikeOther" id="LikeOther" value="#rc.user.getLikeOther()#" size="35" maxlength="50" type="text" class="textInput" />				<p class="formHint">Validations: Required if neither Do you like Cheese? nor Do you like Chocolate? are true.</p>			</div>			<div class="ctrlHolder">				#rc.validationresult.renderErrorByField("HowMuch")#				<label for="HowMuch">#rc.Validator.renderFieldIsRequired("HowMuch", rc.Context)#How much money would you like?</label>				<input name="HowMuch" id="HowMuch" value="#rc.user.getHowMuch()#" size="35" maxlength="50" type="text" class="textInput" />				<p class="formHint">Validations: Numeric - notice that an invalid value is redisplayed upon server side validation failure.</p>			</div>			<div class="ctrlHolder">				#rc.validationresult.renderErrorByField("HowCool")#				<label for="HowCool">#rc.Validator.renderFieldIsRequired("HowCool", rc.Context)#How cool is this?</label>				<input name="HowCool" id="HowCool" value="#rc.user.getHowCool()#" size="35" maxlength="50" type="text" class="textInput" />				<p class="formHint">Validations: Numeric Range Between 1 and 10..</p>			</div>			<div class="ctrlHolder">				#rc.validationresult.renderErrorByField("AllowCommunication")#				<p class="label">#rc.Validator.renderFieldIsRequired("AllowCommunication", rc.Context)#Allow Communication</p>				<label for="AllowCommunication-1" class="inlineLabel"><input name="AllowCommunication" id="AllowCommunication-1" value="1" type="radio" class=""<cfif rc.user.getAllowCommunication() EQ 1> checked="checked"</cfif> />&nbsp;Yes</label>				<label for="AllowCommunication-2" class="inlineLabel"><input name="AllowCommunication" id="AllowCommunication-2" value="0" type="radio" class=""<cfif rc.user.getAllowCommunication() EQ 0> checked="checked"</cfif> />&nbsp;No</label>			</div>			<div class="ctrlHolder">				#rc.validationresult.renderErrorByField("CommunicationMethod")#				<label for="CommunicationMethod">#rc.Validator.renderFieldIsRequired("CommunicationMethod", rc.Context)#Communication Method</label>				<select name="CommunicationMethod" id="CommunicationMethod" class="selectInput">					<option value=""<cfif rc.user.getCommunicationMethod() EQ ""> selected="selected"</cfif>>Select one...</option>					<option value="Email"<cfif rc.user.getCommunicationMethod() EQ "Email"> selected="selected"</cfif>>Email</option>					<option value="Phone"<cfif rc.user.getCommunicationMethod() EQ "Phone"> selected="selected"</cfif>>Phone</option>					<option value="Pony Express"<cfif rc.user.getCommunicationMethod() EQ "Pony Express"> selected="selected"</cfif>>Pony Express</option>				</select>				<p class="formHint">Validations: Required if Allow Communication? is true.</p>			</div>		</fieldset>			<div class="buttonHolder">			<input type="submit" class="submitButton" value="Submit" />			<input type="hidden" name="userid" value="#rc.User.getUserID()#" />		</div>	</form> </div><cfif !rc.nojs><!--- this code is not required, it just customises error aesthetics ---><script type="text/javascript">jQuery(document).ready(function($) {	jQuery.validator.setDefaults({ 		errorClass: 'errorField', 		errorElement: 'p', 		errorPlacement: function(error, element) { 			error.prependTo( element.parents('div.ctrlHolder') ) 		}, 		highlight: function() {}	});});</script></cfif></cfoutput>